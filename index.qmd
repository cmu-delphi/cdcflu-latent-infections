---
talk-title: "Estimating latent infections"
talk-short-title: "{{< meta talk-title >}}"
talk-subtitle: "A retrospective"
author: "Ryan J. Tibshirani"
other-authors: "Daniel J. McDonald, Rachel Lobay, and CMU's Delphi Group"
repo-address: "cmu-delphi.github.io/cdcflu-latent-infections"
talk-date: "CDC Flu -- 18 December 2023"
format: revealjs
---

<!-- Set any of the above to "" to omit them -->

<!-- Or adjust the formatting in _titleslide.qmd -->
{{< include _titleslide.qmd >}}


## Goal

#### Use reported cases to estimate actual infections 

* For every US state 
* Between March 1, 2020 to January 1, 2022
* Provide an "authoritative" estimate with uncertainty
* No compartmental models, no sampling or Bayesian methods

## Retrospective deconvolution

* Based on prior work (Jahja et al. 2021)
* Take reported cases and deconvolve them to find when symptoms began
* Private CDC linelist to estimate the delay from symptom onset to case report
  - Different delay distribution for every report date and state
* Combine with Literature estimate of the delay from infection to symptom onset
  - Variant specific
  - Prevailing variant mix taken from GISAID
* Convolve both to get delay distribution from infection to case report

## Empirical delay distributions

* Day / state specific, using CDC Private Linelist
* Method of moments to fit a gamma density

```{r linelist-delay}
#| fig-width: 8
dates <- seq(as.Date("2020-03-01"), as.Date("2022-03-01"), by = "3 months")
report_delay <- read_rds("data/report_delay_ca_ga.rds") |>
  filter(Date %in% dates)
ggplot(report_delay, aes(x = delay, y = dist, color = factor(Date))) +
  geom_line() +
  facet_wrap(~state) +
  theme_bw(base_size = 14) +
  ylab("Probability") +
  xlab("Days from symptom onset to case report") +
  scale_color_viridis_d(name = "", option = "B", end = .9, begin = .1) +
  scale_y_continuous(expand = expansion(c(0, .05))) +
  scale_x_continuous(expand = expansion(c(0, .05)))
```

## Cases are selectively reported to CDC

* CDC linelist with both onset and report date
* Shrink the parameters proportionally toward national (each day)

```{r cdc-vs-jhu}
# data restricted, only have the figure
knitr::include_graphics("gfx/proportion_cdc_vs_jhu.png")
```


## Variant mix over time - from GISAID

```{r variant-mix}
#| fig-width: 8
#| fig-height: 4
vmix <- read_rds("data/variant_mix.rds") |>
  filter(State %in% c("CA", "GA")) |>
  rename(Original = Other) |>
  pivot_longer(Alpha:Original)
ggplot(vmix, aes(Date, y = value, fill = name)) +
  geom_area() +
  facet_wrap(~State) +
  theme_bw(base_size = 14) +
  ylab("Proportion") +
  xlab("Date") +
  scale_fill_viridis_d(name = "", option = "B", end = .9, begin = .1) +
  scale_y_continuous(expand = expansion()) +
  scale_x_date(expand = expansion())
```


## Incubation period

* Literature estimates for each variant
* Distribution is by day / state specific variant mix

```{r incubation-distn}
#| fig-width: 8
#| fig-height: 4
incubation <- read_rds("data/incubation_ca_ga.rds")
incubation |>
  filter(Date %in% dates) |>
  ggplot(aes(x = delay, y = dist, color = factor(Date))) +
  geom_line() +
  facet_wrap(~state) +
  theme_bw(base_size = 14) +
  ylab("Probability") +
  xlab("Days from infection to symptom onset") +
  scale_color_viridis_d(name = "", option = "B", end = .9, begin = .1) +
  scale_y_continuous(expand = expansion(c(0, .05))) +
  scale_x_continuous(expand = expansion(c(0, .05)))
```

## Total delay distribution -- Infection to case report

```{r convolved-distn}
#| fig-width: 8
#| fig-height: 4
convolved <- read_rds("data/convolved_ca_ga.rds")
convolved |>
  filter(Date %in% dates) |>
  ggplot(aes(x = delay, y = dist, color = factor(Date))) +
  geom_line() +
  facet_wrap(~state) +
  theme_bw(base_size = 14) +
  ylab("Probability") +
  xlab("Days from infection to case report") +
  scale_color_viridis_d(name = "", option = "B", end = .9, begin = .1) +
  scale_y_continuous(expand = expansion(c(0, .05))) +
  scale_x_continuous(expand = expansion(c(0, .05)))
```


## From incident cases to incident infection onset

* Move the date back using the convolved distribution


\begin{aligned}
\minimize_{x}\ \sum_{t = 1}^n \left ( y_t -  \sum_{k = 1}^{d} \hat{p}_t(k)x_{t-k} 
\right )^2 + \lambda \|D^{(4)}x\|_1. 
\end{aligned}

* $D^{(4)}$ is a 4th-order difference matrix.
* Result is a smooth estimate of the "deconvolved cases": $C_t$

## Deconvolve cases by their delay distribution

```{r deconvolved-cases}
#| fig-width: 8
#| fig-height: 4
deconvolved <- read_rds("data/deconvolved_ca_ga.rds")
deconvolved |>
  filter(time_value <= "2022-03-01") |>
  rename(`Deconvolved cases` = infections, Cases = cases) |>
  pivot_longer(`Deconvolved cases`:Cases) |>
  ggplot(aes(time_value, value / 1000, color = name)) +
  geom_line() +
  theme_bw(base_size = 14) +
  facet_wrap(~ geo_value, ncol = 1, scales = "free_y") +
  scale_color_manual(name = "", values = c(primary, tertiary)) +
  xlab("Date") + ylab("Cases / Deconvolved cases \n(thousands)") +
  scale_y_continuous(expand = expansion(c(0, .05))) +
  theme(
    legend.position = c(.2, .9), 
    legend.title = element_blank(),
    legend.background = element_rect(fill = "transparent"),
    legend.key = element_rect(fill = "transparent"),
  )
```

## From deconvolved cases to circulating infections

* "Leaky immunity" model

$$I_w = (1-\gamma)I_{w-1} + a_w z_w \sum_{t = w-1}^w C_{t} + \epsilon_w,
\quad \epsilon_w \sim \mathrm{N}(0, \sigma^2_\epsilon)
$$

* $I_w$ is population immunity in week $w$
* $\gamma$ is percentage that loses immunity between $(w-1)$ and $w$
* $a_w$ is the inverse reporting ratio
* $\sum_{t=w-1}^w C_{t}$ is total deconvolved cases in past week
* $z_w$ is estimated infections of cases that are first infections (from Literature)




## Serology data

* Two sources, noisy realizations of $I_w$
* Lots of missingness

```{r serology}
#| fig-width: 8
serology <- read_rds("data/serology.rds") |>
  filter(geo_value %in% c("CA", "GA")) |>
  mutate(Source = case_when(
    Source == "Blood_Donor" ~ "Blood Donor",
    TRUE ~ "Comercial"
  ))
serology |>
  ggplot(aes(Date, color = factor(Source))) +
  geom_point(aes(y = Rate)) +
  geom_errorbar(aes(ymin = lb, ymax = ub)) +
  facet_wrap(~ geo_value) +
  theme_bw(base_size = 14) +
  ylab("Seroprevalence") +
  xlab("Date") +
  scale_color_manual(name = "", values = c(primary, secondary)) +
  scale_y_continuous(expand = expansion()) +
  scale_x_date(date_breaks = "1 year", date_labels = "%Y")
```



## State space model

\begin{aligned}
s_{w,j} &= I_w + \eta_{w,j}, \quad \eta_{w,j} \sim \mathrm{N}(0, u_{w,j}\sigma_{j}), \quad j=1,2\\
I_w &= (1-\gamma)I_{w-1} + a_w z_w \sum_{t = w-1}^w C_{t} + \epsilon_w
\end{aligned}


* Estimate $\gamma$, $a_w$, $I_w$ and noise variances using a state space model
* Use Kalman filter / smoother, maximize the likelihood
* Handles missingness automatically
* Imposes smoothness on $a_w$ (like a spline)
* Also gives variance estimates for $a_w$

## Estimated population immunity

* $\gamma$ estimated to be 0.8% per week

```{r serology-estimates}
#| fig-width: 8
latent_sero <- read_rds("data/latent_serology.rds") |>
  filter(state %in% c("CA", "GA")) |>
  rename(geo_value = state)

serology |>
  ggplot(aes(Date)) +
  geom_ribbon(data = latent_sero, aes(
    ymin = sero_weekly + 2 * sqrt(var_sero_weekly), 
    ymax = sero_weekly - 2 * sqrt(var_sero_weekly)), 
    fill = tertiary,
    alpha = .2
  ) +
  geom_point(aes(y = Rate, color = factor(Source))) +
  geom_errorbar(aes(ymin = lb, ymax = ub, color = factor(Source))) +
  geom_line(data = latent_sero, aes(y = sero_weekly), color = tertiary) +
  facet_wrap(~ geo_value) +
  theme_bw(base_size = 14) +
  ylab("Estimated population\n immunity") +
  xlab("Date") +
  scale_color_manual(name = "", values = c(primary, secondary)) +
  scale_y_continuous(expand = expansion()) +
  scale_x_date(date_breaks = "1 year", date_labels = "%Y")
```


## Estimated inverse reporting ratios

```{r inverse-reporting-ratios}
#| fig-width: 8
#| fig-height: 4
inverse_reporting <- read_rds("data/inverse_reporting_ratios.rds")
inverse_reporting <- inverse_reporting |>
  map(~ tibble(Date = as.Date(.x$date), at = .x$alpha, var_at = .x$vhat)) |>
  bind_rows(.id = "geo_value") |>
  filter(geo_value %in% c("CA", "GA"))
ggplot(inverse_reporting, aes(Date, at)) +
  geom_hline(yintercept = 1) +
  geom_ribbon(aes(
    ymin = pmax(at - qnorm(.95) * sqrt(var_at), 1), 
    ymax = pmax(at + qnorm(.95) * sqrt(var_at), 1)), 
    fill = tertiary, alpha = .2
  ) +
  geom_ribbon(aes(
    ymin = pmax(at - qnorm(.9) * sqrt(var_at), 1), 
    ymax = pmax(at + qnorm(.9) * sqrt(var_at), 1)), 
    fill = tertiary, alpha = .3
  ) +
  geom_ribbon(aes(
    ymin = pmax(at - qnorm(.75) * sqrt(var_at), 1), 
    ymax = pmax(at + qnorm(.75) * sqrt(var_at), 1)),
    fill = tertiary, alpha = .5
  ) +
  geom_line(color = primary) +
  facet_wrap(~ geo_value, ncol = 1, scales = "free_y") +
  theme_bw(base_size = 14) +
  scale_y_continuous(limits = c(1, NA), expand = expansion(c(0, .05))) +
  scale_x_date(expand = expansion()) +
  geom_vline(xintercept = as.Date("2021-12-01"), linetype = "dashed") +
  xlab("Date") + ylab("Estimated inverse \nreporting ratio")
```


## Estimated latent infections

```{r latent-infections}
#| fig-width: 8
#| fig-height: 4
latent_infections <- as_tibble(read_rds("data/latent_infections.rds")) |>
  select(date:adj_infect_var, unadj_inf_rate, cases_rate_7d_av) |>
  left_join(epipredict::state_census |> select(pop, abbr) |> 
              mutate(abbr = toupper(abbr)), by = c("geo_value" = "abbr")) |>
  mutate(adj_infect_rate = adj_infect / pop * 1e5,
         adj_infect_rate_sd = sqrt(adj_infect_var) / pop * 1e5 ) |>
  select(date, geo_value, infections = adj_infect_rate, 
         infections_sd = adj_infect_rate_sd, 
         deconv_cases = unadj_inf_rate, 
         cases = cases_rate_7d_av) 

latent_infections |>
  filter(geo_value %in% c("CA", "GA")) |>
  ggplot(aes(date)) +
  geom_ribbon(aes(
    ymin = pmax(infections - qnorm(.95) * infections_sd, deconv_cases), 
    ymax = pmax(infections + qnorm(.95) * infections_sd, deconv_cases)), 
    fill = tertiary, alpha = .2
  ) +
  geom_ribbon(aes(
    ymin = pmax(infections - qnorm(.9) * infections_sd, deconv_cases), 
    ymax = pmax(infections + qnorm(.9) * infections_sd, deconv_cases)), 
    fill = tertiary, alpha = .3
  ) +
  geom_ribbon(aes(
    ymin = pmax(infections - qnorm(.75) * infections_sd, deconv_cases), 
    ymax = pmax(infections + qnorm(.75) * infections_sd, deconv_cases)), 
    fill = tertiary, alpha = .5
  ) +
  geom_line(aes(y = infections, color = "Infections")) +
  geom_line(aes(y = deconv_cases, color = "Deconvolved cases")) +
  geom_line(aes(y = cases, color = "Cases")) +
  facet_wrap(~ geo_value, ncol = 1, scales = "free_y") +
  theme_bw(base_size = 14) +
  scale_x_date(expand = expansion()) + 
  scale_color_manual(name = "", values = c(
    Cases = primary, 
    `Deconvolved cases` = secondary, 
    Infections = tertiary
  )) +
  geom_vline(xintercept = as.Date("2021-12-01"), linetype = "dashed") +
  xlab("Date") + ylab("Estimated latent infections\n (per 100K people)")
```

## Pre-omicron

```{r latent-infects-pre-omicron}
#| fig-width: 8
#| fig-height: 4
latent_infections |>
  filter(geo_value %in% c("CA", "GA"), date <= "2021-12-01") |>
  ggplot(aes(date)) +
  geom_ribbon(aes(
    ymin = pmax(infections - qnorm(.95) * infections_sd, deconv_cases), 
    ymax = pmax(infections + qnorm(.95) * infections_sd, deconv_cases)), 
    fill = tertiary, alpha = .2
  ) +
  geom_ribbon(aes(
    ymin = pmax(infections - qnorm(.9) * infections_sd, deconv_cases), 
    ymax = pmax(infections + qnorm(.9) * infections_sd, deconv_cases)), 
    fill = tertiary, alpha = .3
  ) +
  geom_ribbon(aes(
    ymin = pmax(infections - qnorm(.75) * infections_sd, deconv_cases), 
    ymax = pmax(infections + qnorm(.75) * infections_sd, deconv_cases)), 
    fill = tertiary, alpha = .5
  ) +
  geom_line(aes(y = infections, color = "Infections")) +
  geom_line(aes(y = deconv_cases, color = "Deconvolved cases")) +
  geom_line(aes(y = cases, color = "Cases")) +
  facet_wrap(~ geo_value, ncol = 1, scales = "free_y") +
  theme_bw(base_size = 14) +
  scale_x_date(expand = expansion()) + 
  scale_color_manual(name = "", values = c(
    Cases = primary, 
    `Deconvolved cases` = secondary, 
    Infections = tertiary
  )) +
  xlab("Date") + ylab("Estimated latent infections\n (per 100K people)")
```

## Omicron (more uncertain, due to serology)

```{r latent-infects-omicron}
#| fig-width: 8
#| fig-height: 4
latent_infections |>
  filter(geo_value %in% c("CA", "GA"), date >= "2021-12-01") |>
  ggplot(aes(date)) +
  geom_ribbon(aes(
    ymin = pmax(infections - qnorm(.95) * infections_sd, deconv_cases), 
    ymax = pmax(infections + qnorm(.95) * infections_sd, deconv_cases)), 
    fill = tertiary, alpha = .2
  ) +
  geom_ribbon(aes(
    ymin = pmax(infections - qnorm(.9) * infections_sd, deconv_cases), 
    ymax = pmax(infections + qnorm(.9) * infections_sd, deconv_cases)), 
    fill = tertiary, alpha = .3
  ) +
  geom_ribbon(aes(
    ymin = pmax(infections - qnorm(.75) * infections_sd, deconv_cases), 
    ymax = pmax(infections + qnorm(.75) * infections_sd, deconv_cases)), 
    fill = tertiary, alpha = .5
  ) +
  geom_line(aes(y = infections, color = "Infections")) +
  geom_line(aes(y = deconv_cases, color = "Deconvolved cases")) +
  geom_line(aes(y = cases, color = "Cases")) +
  facet_wrap(~ geo_value, ncol = 1, scales = "free_y") +
  theme_bw(base_size = 14) +
  scale_x_date(expand = expansion(), date_breaks = "1 month", date_labels = "%b") + 
  scale_color_manual(name = "", values = c(
    Cases = primary, 
    `Deconvolved cases` = secondary, 
    Infections = tertiary
  )) +
  xlab("Date") + ylab("Estimated latent infections\n (per 100K people)")
```


## Validation and usefulness

* Compare to other public estimates
* Small exercise estimating Infection-Hospitalization Ratio
* 


## Thanks:

```{r qr-codes}
#| include: false
#| fig-format: png
# Code to generate QR codes to link to any external sources
qrdat <- function(text, ecl = c("L", "M", "Q", "H")) {
  x <- qrcode::qr_code(text, ecl)
  n <- nrow(x)
  s <- seq_len(n)
  tib <- tidyr::expand_grid(x = s, y = rev(s))
  tib$z <- c(x)
  tib
}
qr1 <- qrdat("https://cmu-delphi.github.io/cdcflu-latent-infections/")
ggplot(qr1, aes(x, y, fill = z)) +
  geom_raster() +
  ggtitle("These slides.") +
  coord_equal(expand = FALSE) +
  scale_fill_manual(values = c("white", "black"), guide = "none") +
  theme_void(base_size = 18) +
  theme(plot.title = element_text(hjust = .5))
```

::: flex
::: w-70
- The whole [CMU Delphi Team](https://delphi.cmu.edu/about/team/) (across many institutions)
- Optum/UnitedHealthcare, Change Healthcare.
- Google, Facebook, Amazon Web Services.
- Quidel, SafeGraph, Qualtrics.
- Centers for Disease Control and Prevention.
- Council of State and Territorial Epidemiologists
:::

::: w-30

```{r}
#| fig-width: 4
#| fig-height: 4.5
knitr::include_graphics("gfx/qr-codes-1.png")
```


:::

:::

::: {layout-row=1 fig-align="center"}
![](gfx/delphi.jpg){height="100px"}
![](gfx/berkeley.jpg){height="100px"}
![](gfx/cmu.jpg){height="100px"}
![](gfx/ubc.jpg){width="250px"}
![](gfx/usc.jpg){width="250px"}
![](gfx/stanford.jpg){width="250px"}
:::


